---
openapi: 3.0.3
info:
  title: Habitica API
  version: 3.0.0
servers:
  - url: https://habitica.com/api/v3/
    description: Habitica API server
components:
  securitySchemes:
    userId:
      type: apiKey
      in: header
      name: x-api-user
    apiToken:
      type: apiKey
      in: header
      name: x-api-key
paths:
  /status:
    get:
      summary: Get Habitica API status
      description: Endpoint to get the current status of the Habitica API.
      responses:
        "200":
          description: Habitica API status retrieved successfully
          content:
            application/json:
              example:
                status: up
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                status: down
                message: The Habitica API is currently experiencing issues
  /cron:
    post:
      summary: Run cron
      description: This causes cron to run. It assumes that the user has already been
        shown the Record Yesterday's Activity ("Check off any Dailies you did
        yesterday") screen and so it will immediately apply damage for
        incomplete due Dailies.
      security:
        - userId: []
          apiToken: []
      responses:
        "200":
          description: Cron executed successfully
          content:
            application/json:
              example:
                success: true
                message: Cron executed successfully
        "400":
          description: Bad Request
          content:
            application/json:
              example:
                success: false
                message: Invalid input data
  /user:
    get:
      summary: Get user information
      description: Retrieve information about the user.
      security:
        - userId: []
          apiToken: []
      responses:
        '200':
          description: User information retrieved successfully
          content:
            application/json:
              example:
                _id: a1780f33-xxxx-40e9-b50a-404e4964a09a
                username: my_username
                email: my_email@example.com
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: Authentication failed. Please provide valid userId and apiToken.
  /user/{userId}:
    parameters:
      - name: userId
        in: path
        description: ID of the user to retrieve information for
        required: true
        schema:
          type: string
        example: a1780f33-xxxx-40e9-b50a-404e4964a09a
    get:
      summary: Get user information
      description: Retrieve information about a specific user.
      security:
        - userId: []
          apiToken: []
      responses:
        '200':
          description: User information retrieved successfully
          content:
            application/json:
              example:
                _id: a1780f33-xxxx-40e9-b50a-404e4964a09a
                username: my_username
                email: my_email@example.com
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: Authentication failed. Please provide valid userId and apiToken.
        '404':
          description: User not found
          content:
            application/json:
              example:
                error: User with ID a1780f33-xxxx-40e9-b50a-404e4964a09a not found
  /tasks/user:
    get:
      summary: Get user's tasks
      description: Retrieve all tasks for the authenticated user.
      security:
        - userId: []
          apiToken: []
      responses:
        '200':
          description: Tasks retrieved successfully
          content:
            application/json:
              example:
                dailies:
                  - id: daily123
                    text: Complete daily exercise
                    completed: false
                  - id: daily456
                    text: Read 30 minutes
                    completed: true
                todos:
                  - id: todo789
                    text: Buy groceries
                    completed: false
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: Authentication failed. Please provide valid userId and apiToken.
  /groups:
    get:
      summary: Get user's groups
      description: Retrieve information about groups associated with the user.
      security:
        - userId: []
          apiToken: []
      parameters:
        - name: type
          in: query
          description: Type of groups to retrieve (party, guilds, privateGuilds, publicGuilds, tavern)
          required: true
          schema:
            type: string
            enum:
              - party
              - guilds
              - privateGuilds
              - publicGuilds
              - tavern
          example: party
        - name: paginate
          in: query
          description: Whether to paginate the results (true or false)
          schema:
            type: boolean
          example: false
        - name: page
          in: query
          description: Page number for paginated results (if paginate is true)
          schema:
            type: integer
            minimum: 1
          example: 1
      responses:
        '200':
          description: User's groups retrieved successfully
          content:
            application/json:
              example:
                data:
                  - id: a1780f33-xxxx-40e9-b50a-404e4964a09a
                    name: Group One
                    type: party
                  - id: a1780f33-xxyy-40e9-b50a-404e4964a09a
                    name: Group Two
                    type: guild
                total: 2
                page: 1
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: You must be logged in to access this information
    post:
      summary: Create a new group
      description: Endpoint to create a new group.
      security:
        - userId: []
          apiToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: My Group
                type:
                  type: string
                  enum:
                  - party
                  - guilds
                  - privateGuilds
                  - publicGuilds
                  - tavern
                  example: party
      responses:
        "201":
          description: Group created successfully
          content:
            application/json:
              example:
                id: a1780f33-gggg-40e9-b50a-404e4964a09a
                name: My Group
                type: party
        "401":
          description: Unauthorized
          content:
            application/json:
              example:
                error: You must be logged in to create a new group
  /groups/{groupId}:
    get:
      summary: Get group information
      description: Retrieve information about a specific group.
      security:
        - userId: []
          apiToken: []
      parameters:
        - name: groupId
          in: path
          description: ID of the group to retrieve information for
          required: true
          schema:
            type: string
          example: a1780f33-gggg-40e9-b50a-404e4964a09a
      responses:
        '200':
          description: Group information retrieved successfully
          content:
            application/json:
              example:
                id: a1780f33-gggg-40e9-b50a-404e4964a09a
                name: Example Group
                type: guild
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: Authentication failed. Please provide valid userId and apiToken.
        '404':
          description: Group not found
          content:
            application/json:
              example:
                error: Group with ID group123 not found
  /groups/party:
    get:
      summary: Get party information
      description: Retrieve information about the user's party.
      security:
        - userId: []
          apiToken: []
      responses:
        "200":
          description: Party information retrieved successfully
          content:
            application/json:
              example:
                name: The Party
                leader: a1780f33-xxxx-40e9-b50a-404e4964a09a
                members:
                  - a1780f33-xxxx-40e9-b50a-404e4964a09a
                  - a1780f33-yyyy-40e9-b50a-404e4964a09a
        "401":
          description: Unauthorized
          content:
            application/json:
              example:
                error: You must be logged in to access this information
        "404":
          description: Party not found
          content:
            application/json:
              example:
                error: Party not found for the user
    post:
      summary: Create a new party
      description: Endpoint to create a new party for the user.
      security:
        - userId: []
          apiToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: My Party
                leader:
                  type: string
                  example: a1780f33-xxxx-40e9-b50a-404e4964a09a
                members:
                  type: array
                  items:
                    type: string
                  example:
                    - a1780f33-xxxx-40e9-b50a-404e4964a09a
                    - a1780f33-yyyy-40e9-b50a-404e4964a09a
      responses:
        "201":
          description: Party created successfully
          content:
            application/json:
              example:
                name: My Party
                leader: a1780f33-xxxx-40e9-b50a-404e4964a09a
                members:
                  - a1780f33-xxxx-40e9-b50a-404e4964a09a
                  - a1780f33-yyyy-40e9-b50a-404e4964a09a
        "401":
          description: Unauthorized
          content:
            application/json:
              example:
                error: You must be logged in to create a new party
        "409":
          description: Conflict
          content:
            application/json:
              example:
                error: Party already exists for the user
  /groups/party/quests:
    post:
      summary: Create a new quest
      description: Endpoint to create a new quest for the party.
      security:
        - userId: []
          apiToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                key:
                  type: string
                  example: my_quest
                text:
                  type: string
                  example: Defeat the Dragon
                challengeRating:
                  type: number
                  example: 5
      responses:
        "200":
          description: Quest created successfully
          content:
            application/json:
              example:
                success: true
                message: Quest created successfully
        "400":
          description: Bad Request
          content:
            application/json:
              example:
                success: false
                message: Invalid input data
